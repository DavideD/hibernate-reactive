/* Hibernate, Relational Persistence for Idiomatic Java
 *
 * SPDX-License-Identifier: LGPL-2.1-or-later
 * Copyright: Red Hat Inc. and Hibernate Authors
 */
package org.hibernate.reactive.provider.service;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.concurrent.CompletionStage;

import org.hibernate.internal.CoreLogging;
import org.hibernate.internal.CoreMessageLogger;
import org.hibernate.reactive.pool.ReactiveConnectionPool;
import org.hibernate.reactive.util.impl.CompletionStages;
import org.hibernate.reactive.vertx.VertxInstance;
import org.hibernate.service.ServiceRegistry;
import org.hibernate.tool.schema.internal.exec.GenerationTarget;
import org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase;



/**
 * Adaptor that redirects DDL generated by the schema export
 * tool to the reactive connection.
 *
 * @author Gavin King
 */
public class ReactiveGenerationTarget implements GenerationTarget {
	private final ServiceRegistry registry;
	private VertxInstance vertxSupplier;
	private ReactiveConnectionPool service;
	private Set<String> statements;
	private volatile boolean done = false;
	private volatile boolean started = false;
	private List<String> commands = new ArrayList<>();

	CoreMessageLogger log = CoreLogging.messageLogger( GenerationTargetToDatabase.class );


	public ReactiveGenerationTarget(ServiceRegistry registry) {
		this.registry = registry;
	}

	@Override
	public void prepare() {
		service = registry.getService( ReactiveConnectionPool.class );
		vertxSupplier = registry.getService( VertxInstance.class );
		statements = new HashSet<>();
	}

	@Override
	public void accept(String command) {
		// avoid executing duplicate DDL statements
		// (hack specifically to avoid multiple
		// inserts into a sequence emulation table)
		if ( statements.add( command ) ) {
				commands.add( command );
//				Handler<Void> handler = v1 -> {
//					service.getConnection().thenAccept( reactiveConnection -> {
//												 reactiveConnection.execute( command )
//												 .handle( (r, e) -> {
//													 if ( e != null ) {
//														 log.warnf( "HRX000021: DDL command failed [%s]", e.getMessage() );
//													 }
//													 return null;
//												 } );
//									 });
//				}
//				vertxSupplier.getVertx().getOrCreateContext().runOnContext( handler );
		}
	}

	@Override
	public void release() {
		statements = null;
		if ( commands != null ) {
			vertxSupplier.getVertx().getOrCreateContext().runOnContext( v1 -> {
				service.getConnection().thenAccept( reactiveConnection ->  {
					CompletionStage<Void> result = CompletionStages.voidFuture();
					for ( String command : commands ) {
						result = result.thenCompose(  v -> reactiveConnection.execute( command )
								.handle( (r, e) -> {
									if ( e != null ) {
										log.warnf( "HRX000021: DDL command failed [%s]", e.getMessage() );
									}
									return null;
								} )
						);
					}
					result
						.whenComplete( (v, e) -> reactiveConnection.close() )
						.whenComplete( (v, e) -> done = true );

				} );
			} );

			while( !done ) {
				try {
					Thread.sleep( 10 );
				}
				catch (InterruptedException e) {
					e.printStackTrace();
				}
			}
		}
	}
}
